---
import { languagesDisplay, type Language, type LanguageInfo } from '$i18n/utils.ts';

const currentLanguage = Astro.currentLocale as Language;
const currentLanguageInfo = languagesDisplay[currentLanguage] as LanguageInfo;

const additionalLanguagesCount = Object.keys(languagesDisplay).length - 1;
const fullHeight = `${3 + additionalLanguagesCount * 2.5}rem`;

const additionalLanguagesInfo = Object
    .keys(languagesDisplay)
    .filter(language => language !== currentLanguage)
    .map(language => ({
        key: language,
        info: languagesDisplay[language as Language] as LanguageInfo,
    }));
---

<div class="language-selector">
    <button class="language">
        <span class="language-flag" set:html={currentLanguageInfo.iconRaw}/>
        <span>{currentLanguageInfo.displayShort}</span>
    </button>
    {additionalLanguagesInfo.map(language =>
            <a class="language" href={`/${language.key}/`}>
                <img src={language.info.icon.src}
                     alt={language.info.displayShort}
                     height={language.info.icon.height}
                     width={language.info.icon.width}
                     decoding="async"
                     class="language-flag"/>
                <span>{language.info.displayShort}</span>
            </a>,
    )}
</div>

<style define:vars={{ 'full-height': fullHeight }}>
    .language-selector {
        height: 2.75rem;
        display: flex;
        flex-direction: column;
        overflow: clip;
        transition: height .3s, background-color .3s;
        border-radius: .5rem;
    }

    .language-selector:hover, .language-selector:focus-within {
        height: var(--full-height);
        background-color: var(--light-gray);
    }

    .language {
        height: 1rem;
        display: flex;
        align-items: center;
        gap: .5rem;
        color: inherit;
        text-decoration: none;
        padding: 1rem;
        transition: color .3s;
        background: transparent;
        white-space: nowrap;
    }

    button.language {
        height: 3rem;
        border: none;
        font-size: inherit;
        margin: 0;
        line-height: 1rem;
    }

    .language-flag, .language-flag img, :global(.language-flag svg) {
        height: 1rem;
        width: 1rem;
    }

    .language:hover:not(:first-child) {
        color: var(--primary-color);
    }

    .language:focus-visible {
        border: none;
        outline: none;
        box-shadow: inset 0 0 0 1px var(--primary-color);
        border-radius: .5rem;
    }

    .language:not(:last-child) {
        padding-bottom: .75rem;
    }

    .language:not(:first-child) {
        padding-top: .75rem;
    }
</style>
